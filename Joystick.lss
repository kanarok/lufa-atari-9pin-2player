
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000110e  000011a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000110e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800110  00800110  000011b2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000587d  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b6c  00000000  00000000  00006d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fc3  00000000  00000000  0000886d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000770  00000000  00000000  0000b830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000232d  00000000  00000000  0000bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003211  00000000  00000000  0000e2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  000114de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	af c0       	rjmp	.+350    	; 0x160 <__ctors_end>
       2:	00 00       	nop
       4:	c8 c0       	rjmp	.+400    	; 0x196 <__bad_interrupt>
       6:	00 00       	nop
       8:	c6 c0       	rjmp	.+396    	; 0x196 <__bad_interrupt>
       a:	00 00       	nop
       c:	c4 c0       	rjmp	.+392    	; 0x196 <__bad_interrupt>
       e:	00 00       	nop
      10:	c2 c0       	rjmp	.+388    	; 0x196 <__bad_interrupt>
      12:	00 00       	nop
      14:	c0 c0       	rjmp	.+384    	; 0x196 <__bad_interrupt>
      16:	00 00       	nop
      18:	be c0       	rjmp	.+380    	; 0x196 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bc c0       	rjmp	.+376    	; 0x196 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ba c0       	rjmp	.+372    	; 0x196 <__bad_interrupt>
      22:	00 00       	nop
      24:	b8 c0       	rjmp	.+368    	; 0x196 <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c4       	rjmp	.+2054   	; 0x830 <__vector_10>
      2a:	00 00       	nop
      2c:	b4 c0       	rjmp	.+360    	; 0x196 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b2 c0       	rjmp	.+356    	; 0x196 <__bad_interrupt>
      32:	00 00       	nop
      34:	b0 c0       	rjmp	.+352    	; 0x196 <__bad_interrupt>
      36:	00 00       	nop
      38:	ae c0       	rjmp	.+348    	; 0x196 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ac c0       	rjmp	.+344    	; 0x196 <__bad_interrupt>
      3e:	00 00       	nop
      40:	aa c0       	rjmp	.+340    	; 0x196 <__bad_interrupt>
      42:	00 00       	nop
      44:	a8 c0       	rjmp	.+336    	; 0x196 <__bad_interrupt>
      46:	00 00       	nop
      48:	a6 c0       	rjmp	.+332    	; 0x196 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a4 c0       	rjmp	.+328    	; 0x196 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a2 c0       	rjmp	.+324    	; 0x196 <__bad_interrupt>
      52:	00 00       	nop
      54:	a0 c0       	rjmp	.+320    	; 0x196 <__bad_interrupt>
      56:	00 00       	nop
      58:	9e c0       	rjmp	.+316    	; 0x196 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9c c0       	rjmp	.+312    	; 0x196 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9a c0       	rjmp	.+308    	; 0x196 <__bad_interrupt>
      62:	00 00       	nop
      64:	98 c0       	rjmp	.+304    	; 0x196 <__bad_interrupt>
      66:	00 00       	nop
      68:	96 c0       	rjmp	.+300    	; 0x196 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	94 c0       	rjmp	.+296    	; 0x196 <__bad_interrupt>
      6e:	00 00       	nop
      70:	92 c0       	rjmp	.+292    	; 0x196 <__bad_interrupt>
      72:	00 00       	nop
      74:	90 c0       	rjmp	.+288    	; 0x196 <__bad_interrupt>
      76:	00 00       	nop
      78:	8e c0       	rjmp	.+284    	; 0x196 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8c c0       	rjmp	.+280    	; 0x196 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8a c0       	rjmp	.+276    	; 0x196 <__bad_interrupt>
      82:	00 00       	nop
      84:	88 c0       	rjmp	.+272    	; 0x196 <__bad_interrupt>
      86:	00 00       	nop
      88:	86 c0       	rjmp	.+268    	; 0x196 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	84 c0       	rjmp	.+264    	; 0x196 <__bad_interrupt>
      8e:	00 00       	nop
      90:	82 c0       	rjmp	.+260    	; 0x196 <__bad_interrupt>
      92:	00 00       	nop
      94:	80 c0       	rjmp	.+256    	; 0x196 <__bad_interrupt>
      96:	00 00       	nop
      98:	7e c0       	rjmp	.+252    	; 0x196 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7c c0       	rjmp	.+248    	; 0x196 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	7a c0       	rjmp	.+244    	; 0x196 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	78 c0       	rjmp	.+240    	; 0x196 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	76 c0       	rjmp	.+236    	; 0x196 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	26 03 4c 00 55 00 46 00 41 00 20 00 4a 00 6f 00     &.L.U.F.A. .J.o.
      bc:	79 00 73 00 74 00 69 00 63 00 6b 00 20 00 44 00     y.s.t.i.c.k. .D.
      cc:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d4 <ManufacturerString>:
      d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
      ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
      f2:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     102:	00 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
     112:	00 05                                               ..

00000114 <DeviceDescriptor>:
     114:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
     124:	00 01                                               ..

00000126 <JoystickReport>:
     126:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 32     ...........0.1.2
     136:	16 9c ff 26 64 00 36 ff ff 46 01 00 95 03 75 08     ...&d.6..F....u.
     146:	81 02 c0 05 09 19 01 29 02 15 00 25 01 75 01 95     .......)...%.u..
     156:	02 81 02 75 06 95 01 81 01 c0                       ...u......

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf ef       	ldi	r28, 0xFF	; 255
     166:	da e0       	ldi	r29, 0x0A	; 10
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	ee e0       	ldi	r30, 0x0E	; 14
     174:	f1 e1       	ldi	r31, 0x11	; 17
     176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
     178:	05 90       	lpm	r0, Z+
     17a:	0d 92       	st	X+, r0
     17c:	a0 31       	cpi	r26, 0x10	; 16
     17e:	b1 07       	cpc	r27, r17
     180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
     182:	21 e0       	ldi	r18, 0x01	; 1
     184:	a0 e1       	ldi	r26, 0x10	; 16
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
     18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
     18c:	a1 32       	cpi	r26, 0x21	; 33
     18e:	b2 07       	cpc	r27, r18
     190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
     192:	42 d0       	rcall	.+132    	; 0x218 <main>
     194:	ba c7       	rjmp	.+3956   	; 0x110a <_exit>

00000196 <__bad_interrupt>:
     196:	34 cf       	rjmp	.-408    	; 0x0 <__vectors>

00000198 <LEDs_SetAllLEDs>:
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
     198:	95 b1       	in	r25, 0x05	; 5
     19a:	28 2f       	mov	r18, r24
     19c:	21 70       	andi	r18, 0x01	; 1
     19e:	20 95       	com	r18
     1a0:	91 60       	ori	r25, 0x01	; 1
     1a2:	92 23       	and	r25, r18
     1a4:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
     1a6:	9b b1       	in	r25, 0x0b	; 11
     1a8:	28 2f       	mov	r18, r24
     1aa:	20 72       	andi	r18, 0x20	; 32
     1ac:	20 95       	com	r18
     1ae:	90 62       	ori	r25, 0x20	; 32
     1b0:	92 23       	and	r25, r18
     1b2:	9b b9       	out	0x0b, r25	; 11
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
     1b4:	98 b1       	in	r25, 0x08	; 8
     1b6:	9f 77       	andi	r25, 0x7F	; 127
     1b8:	80 78       	andi	r24, 0x80	; 128
     1ba:	89 2b       	or	r24, r25
     1bc:	88 b9       	out	0x08, r24	; 8
     1be:	08 95       	ret

000001c0 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1c0:	84 b7       	in	r24, 0x34	; 52
     1c2:	87 7f       	andi	r24, 0xF7	; 247
     1c4:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	a8 95       	wdr
     1cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1d0:	88 61       	ori	r24, 0x18	; 24
     1d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     1da:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	80 e8       	ldi	r24, 0x80	; 128
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1e8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1ec:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     1ee:	84 b1       	in	r24, 0x04	; 4
     1f0:	8f 71       	andi	r24, 0x1F	; 31
     1f2:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     1f4:	8d b1       	in	r24, 0x0d	; 13
     1f6:	8f 7c       	andi	r24, 0xCF	; 207
     1f8:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     1fa:	85 b1       	in	r24, 0x05	; 5
     1fc:	80 6e       	ori	r24, 0xE0	; 224
     1fe:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     200:	8e b1       	in	r24, 0x0e	; 14
     202:	80 63       	ori	r24, 0x30	; 48
     204:	8e b9       	out	0x0e, r24	; 14
				DDRB  |=  LEDS_PORTB_LEDS;
     206:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     208:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     20a:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     20c:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     20e:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     210:	47 98       	cbi	0x08, 7	; 8

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     212:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     214:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
     216:	ef c2       	rjmp	.+1502   	; 0x7f6 <USB_Init>

00000218 <main>:
	SetupHardware();
     218:	d3 df       	rcall	.-90     	; 0x1c0 <SetupHardware>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	bd df       	rcall	.-134    	; 0x198 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     21e:	78 94       	sei
		HID_Device_USBTask(&Joystick_HID_Interface);
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	93 d6       	rcall	.+3366   	; 0xf4c <HID_Device_USBTask>
		USB_USBTask();
     226:	2c d5       	rcall	.+2648   	; 0xc80 <USB_USBTask>
     228:	fb cf       	rjmp	.-10     	; 0x220 <main+0x8>

0000022a <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     22a:	80 ea       	ldi	r24, 0xA0	; 160
     22c:	b5 cf       	rjmp	.-150    	; 0x198 <LEDs_SetAllLEDs>

0000022e <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	b3 cf       	rjmp	.-154    	; 0x198 <LEDs_SetAllLEDs>

00000232 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	77 d6       	rcall	.+3310   	; 0xf26 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     238:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     23c:	94 60       	ori	r25, 0x04	; 4
     23e:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     242:	81 11       	cpse	r24, r1
     244:	02 c0       	rjmp	.+4      	; 0x24a <EVENT_USB_Device_ConfigurationChanged+0x18>
     246:	81 e8       	ldi	r24, 0x81	; 129
     248:	01 c0       	rjmp	.+2      	; 0x24c <EVENT_USB_Device_ConfigurationChanged+0x1a>
     24a:	80 e2       	ldi	r24, 0x20	; 32
     24c:	a5 cf       	rjmp	.-182    	; 0x198 <LEDs_SetAllLEDs>

0000024e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	30 c5       	rjmp	.+2656   	; 0xcb4 <HID_Device_ProcessControlRequest>

00000254 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     254:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Joystick_HID_Interface+0xe>
     258:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Joystick_HID_Interface+0xf>
     25c:	00 97       	sbiw	r24, 0x00	; 0
     25e:	29 f0       	breq	.+10     	; 0x26a <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Joystick_HID_Interface+0xf>
     266:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Joystick_HID_Interface+0xe>
     26a:	08 95       	ret

0000026c <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     272:	83 b1       	in	r24, 0x03	; 3
     274:	9c b1       	in	r25, 0x0c	; 12
     276:	90 95       	com	r25
     278:	90 73       	andi	r25, 0x30	; 48
     27a:	96 95       	lsr	r25
     27c:	80 95       	com	r24
     27e:	80 7e       	andi	r24, 0xE0	; 224
     280:	89 2b       	or	r24, r25
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     282:	9c b1       	in	r25, 0x0c	; 12
     284:	90 95       	com	r25
	USB_JoystickReport_Data_t* JoystickReport = (USB_JoystickReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     286:	87 ff       	sbrs	r24, 7
     288:	02 c0       	rjmp	.+4      	; 0x28e <CALLBACK_HID_Device_CreateHIDReport+0x22>
	  JoystickReport->Y = -100;
     28a:	2c e9       	ldi	r18, 0x9C	; 156
     28c:	03 c0       	rjmp	.+6      	; 0x294 <CALLBACK_HID_Device_CreateHIDReport+0x28>
	else if (JoyStatus_LCL & JOY_DOWN)
     28e:	84 ff       	sbrs	r24, 4
     290:	02 c0       	rjmp	.+4      	; 0x296 <CALLBACK_HID_Device_CreateHIDReport+0x2a>
	  JoystickReport->Y =  100;
     292:	24 e6       	ldi	r18, 0x64	; 100
     294:	21 83       	std	Z+1, r18	; 0x01

	if (JoyStatus_LCL & JOY_LEFT)
     296:	86 ff       	sbrs	r24, 6
     298:	02 c0       	rjmp	.+4      	; 0x29e <CALLBACK_HID_Device_CreateHIDReport+0x32>
	  JoystickReport->X = -100;
     29a:	2c e9       	ldi	r18, 0x9C	; 156
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <CALLBACK_HID_Device_CreateHIDReport+0x38>
	else if (JoyStatus_LCL & JOY_RIGHT)
     29e:	83 ff       	sbrs	r24, 3
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
	  JoystickReport->X =  100;
     2a2:	24 e6       	ldi	r18, 0x64	; 100
     2a4:	20 83       	st	Z, r18

	if (JoyStatus_LCL & JOY_PRESS)
     2a6:	85 ff       	sbrs	r24, 5
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <CALLBACK_HID_Device_CreateHIDReport+0x44>
	  JoystickReport->Button |= (1 << 1);
     2aa:	83 81       	ldd	r24, Z+3	; 0x03
     2ac:	82 60       	ori	r24, 0x02	; 2
     2ae:	83 83       	std	Z+3, r24	; 0x03

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     2b0:	92 ff       	sbrs	r25, 2
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  JoystickReport->Button |= (1 << 0);
     2b4:	83 81       	ldd	r24, Z+3	; 0x03
     2b6:	81 60       	ori	r24, 0x01	; 1
     2b8:	83 83       	std	Z+3, r24	; 0x03

	*ReportSize = sizeof(USB_JoystickReport_Data_t);
     2ba:	84 e0       	ldi	r24, 0x04	; 4
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	f8 01       	movw	r30, r16
     2c0:	91 83       	std	Z+1, r25	; 0x01
     2c2:	80 83       	st	Z, r24
	return false;
}
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	08 95       	ret

000002cc <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     2cc:	08 95       	ret

000002ce <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2ce:	29 2f       	mov	r18, r25
     2d0:	33 27       	eor	r19, r19
     2d2:	23 30       	cpi	r18, 0x03	; 3
     2d4:	31 05       	cpc	r19, r1
     2d6:	e1 f0       	breq	.+56     	; 0x310 <CALLBACK_USB_GetDescriptor+0x42>
     2d8:	58 f4       	brcc	.+22     	; 0x2f0 <CALLBACK_USB_GetDescriptor+0x22>
     2da:	21 30       	cpi	r18, 0x01	; 1
     2dc:	31 05       	cpc	r19, r1
     2de:	99 f0       	breq	.+38     	; 0x306 <CALLBACK_USB_GetDescriptor+0x38>
     2e0:	22 30       	cpi	r18, 0x02	; 2
     2e2:	31 05       	cpc	r19, r1
     2e4:	69 f5       	brne	.+90     	; 0x340 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     2e6:	82 e2       	ldi	r24, 0x22	; 34
     2e8:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     2ea:	22 ef       	ldi	r18, 0xF2	; 242
     2ec:	30 e0       	ldi	r19, 0x00	; 0
			break;
     2ee:	2c c0       	rjmp	.+88     	; 0x348 <CALLBACK_USB_GetDescriptor+0x7a>
	switch (DescriptorType)
     2f0:	21 32       	cpi	r18, 0x21	; 33
     2f2:	31 05       	cpc	r19, r1
     2f4:	01 f1       	breq	.+64     	; 0x336 <CALLBACK_USB_GetDescriptor+0x68>
     2f6:	22 32       	cpi	r18, 0x22	; 34
     2f8:	31 05       	cpc	r19, r1
     2fa:	11 f5       	brne	.+68     	; 0x340 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
     2fc:	8a e3       	ldi	r24, 0x3A	; 58
     2fe:	90 e0       	ldi	r25, 0x00	; 0
			Address = &JoystickReport;
     300:	26 e2       	ldi	r18, 0x26	; 38
     302:	31 e0       	ldi	r19, 0x01	; 1
			break;
     304:	21 c0       	rjmp	.+66     	; 0x348 <CALLBACK_USB_GetDescriptor+0x7a>
			Size    = sizeof(USB_Descriptor_Device_t);
     306:	82 e1       	ldi	r24, 0x12	; 18
     308:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     30a:	24 e1       	ldi	r18, 0x14	; 20
     30c:	31 e0       	ldi	r19, 0x01	; 1
     30e:	1c c0       	rjmp	.+56     	; 0x348 <CALLBACK_USB_GetDescriptor+0x7a>
			switch (DescriptorNumber)
     310:	99 27       	eor	r25, r25
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	91 05       	cpc	r25, r1
     316:	49 f0       	breq	.+18     	; 0x32a <CALLBACK_USB_GetDescriptor+0x5c>
     318:	28 f0       	brcs	.+10     	; 0x324 <CALLBACK_USB_GetDescriptor+0x56>
     31a:	02 97       	sbiw	r24, 0x02	; 2
     31c:	89 f4       	brne	.+34     	; 0x340 <CALLBACK_USB_GetDescriptor+0x72>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     31e:	ec ea       	ldi	r30, 0xAC	; 172
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	05 c0       	rjmp	.+10     	; 0x32e <CALLBACK_USB_GetDescriptor+0x60>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     324:	ee ee       	ldi	r30, 0xEE	; 238
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <CALLBACK_USB_GetDescriptor+0x60>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     32a:	e4 ed       	ldi	r30, 0xD4	; 212
     32c:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     32e:	84 91       	lpm	r24, Z
     330:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     332:	9f 01       	movw	r18, r30
					break;
     334:	09 c0       	rjmp	.+18     	; 0x348 <CALLBACK_USB_GetDescriptor+0x7a>
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     336:	89 e0       	ldi	r24, 0x09	; 9
     338:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor.HID_JoystickHID;
     33a:	24 e0       	ldi	r18, 0x04	; 4
     33c:	31 e0       	ldi	r19, 0x01	; 1
			break;
     33e:	04 c0       	rjmp	.+8      	; 0x348 <CALLBACK_USB_GetDescriptor+0x7a>
	uint16_t    Size    = NO_DESCRIPTOR;
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
	const void* Address = NULL;
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
	}

	*DescriptorAddress = Address;
     348:	fa 01       	movw	r30, r20
     34a:	31 83       	std	Z+1, r19	; 0x01
     34c:	20 83       	st	Z, r18
	return Size;
}
     34e:	08 95       	ret

00000350 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	ec 01       	movw	r28, r24
     362:	8b 01       	movw	r16, r22
     364:	7a 01       	movw	r14, r20
     366:	d4 d1       	rcall	.+936    	; 0x710 <Endpoint_WaitUntilReady>
     368:	81 11       	cpse	r24, r1
     36a:	33 c0       	rjmp	.+102    	; 0x3d2 <Endpoint_Write_Stream_LE+0x82>
     36c:	e1 14       	cp	r14, r1
     36e:	f1 04       	cpc	r15, r1
     370:	39 f0       	breq	.+14     	; 0x380 <Endpoint_Write_Stream_LE+0x30>
     372:	f7 01       	movw	r30, r14
     374:	80 81       	ld	r24, Z
     376:	91 81       	ldd	r25, Z+1	; 0x01
     378:	08 1b       	sub	r16, r24
     37a:	19 0b       	sbc	r17, r25
     37c:	c8 0f       	add	r28, r24
     37e:	d9 1f       	adc	r29, r25
     380:	c1 2c       	mov	r12, r1
     382:	d1 2c       	mov	r13, r1
     384:	01 15       	cp	r16, r1
     386:	11 05       	cpc	r17, r1
     388:	19 f1       	breq	.+70     	; 0x3d0 <Endpoint_Write_Stream_LE+0x80>
     38a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     38e:	85 fd       	sbrc	r24, 5
     390:	16 c0       	rjmp	.+44     	; 0x3be <Endpoint_Write_Stream_LE+0x6e>
     392:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     396:	8e 77       	andi	r24, 0x7E	; 126
     398:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     39c:	71 d4       	rcall	.+2274   	; 0xc80 <USB_USBTask>
     39e:	e1 14       	cp	r14, r1
     3a0:	f1 04       	cpc	r15, r1
     3a2:	49 f0       	breq	.+18     	; 0x3b6 <Endpoint_Write_Stream_LE+0x66>
     3a4:	f7 01       	movw	r30, r14
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	c8 0e       	add	r12, r24
     3ac:	d9 1e       	adc	r13, r25
     3ae:	d1 82       	std	Z+1, r13	; 0x01
     3b0:	c0 82       	st	Z, r12
     3b2:	85 e0       	ldi	r24, 0x05	; 5
     3b4:	0e c0       	rjmp	.+28     	; 0x3d2 <Endpoint_Write_Stream_LE+0x82>
     3b6:	ac d1       	rcall	.+856    	; 0x710 <Endpoint_WaitUntilReady>
     3b8:	88 23       	and	r24, r24
     3ba:	21 f3       	breq	.-56     	; 0x384 <Endpoint_Write_Stream_LE+0x34>
     3bc:	0a c0       	rjmp	.+20     	; 0x3d2 <Endpoint_Write_Stream_LE+0x82>
     3be:	89 91       	ld	r24, Y+
     3c0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     3c4:	01 50       	subi	r16, 0x01	; 1
     3c6:	11 09       	sbc	r17, r1
     3c8:	ff ef       	ldi	r31, 0xFF	; 255
     3ca:	cf 1a       	sub	r12, r31
     3cc:	df 0a       	sbc	r13, r31
     3ce:	da cf       	rjmp	.-76     	; 0x384 <Endpoint_Write_Stream_LE+0x34>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	08 95       	ret

000003e4 <Endpoint_Write_Control_Stream_LE>:
     3e4:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <USB_ControlRequest+0x6>
     3e8:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <USB_ControlRequest+0x7>
     3ec:	26 17       	cp	r18, r22
     3ee:	37 07       	cpc	r19, r23
     3f0:	48 f0       	brcs	.+18     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
     3f2:	61 15       	cp	r22, r1
     3f4:	71 05       	cpc	r23, r1
     3f6:	39 f4       	brne	.+14     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     3f8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3fc:	2e 77       	andi	r18, 0x7E	; 126
     3fe:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     402:	01 c0       	rjmp	.+2      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     404:	b9 01       	movw	r22, r18
     406:	fc 01       	movw	r30, r24
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	61 15       	cp	r22, r1
     40c:	71 05       	cpc	r23, r1
     40e:	79 f1       	breq	.+94     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
     410:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>
     414:	88 23       	and	r24, r24
     416:	f1 f1       	breq	.+124    	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     418:	85 30       	cpi	r24, 0x05	; 5
     41a:	f1 f1       	breq	.+124    	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
     41c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     420:	83 fd       	sbrc	r24, 3
     422:	3c c0       	rjmp	.+120    	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
     424:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     428:	82 fd       	sbrc	r24, 2
     42a:	2e c0       	rjmp	.+92     	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
     42c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     430:	80 ff       	sbrs	r24, 0
     432:	eb cf       	rjmp	.-42     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     434:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     438:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	92 2b       	or	r25, r18
     440:	61 15       	cp	r22, r1
     442:	71 05       	cpc	r23, r1
     444:	51 f0       	breq	.+20     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
     446:	88 30       	cpi	r24, 0x08	; 8
     448:	91 05       	cpc	r25, r1
     44a:	38 f4       	brcc	.+14     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
     44c:	21 91       	ld	r18, Z+
     44e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     452:	61 50       	subi	r22, 0x01	; 1
     454:	71 09       	sbc	r23, r1
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	f3 cf       	rjmp	.-26     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
     45a:	21 e0       	ldi	r18, 0x01	; 1
     45c:	08 97       	sbiw	r24, 0x08	; 8
     45e:	09 f0       	breq	.+2      	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     466:	8e 77       	andi	r24, 0x7E	; 126
     468:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     46c:	ce cf       	rjmp	.-100    	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     46e:	21 11       	cpse	r18, r1
     470:	cf cf       	rjmp	.-98     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     472:	0a c0       	rjmp	.+20     	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
     474:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>
     478:	88 23       	and	r24, r24
     47a:	61 f0       	breq	.+24     	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     47c:	85 30       	cpi	r24, 0x05	; 5
     47e:	61 f0       	breq	.+24     	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
     480:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     484:	83 fd       	sbrc	r24, 3
     486:	0a c0       	rjmp	.+20     	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
     488:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     48c:	82 ff       	sbrs	r24, 2
     48e:	f2 cf       	rjmp	.-28     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	08 95       	ret
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	08 95       	ret
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	08 95       	ret
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	08 95       	ret

000004a0 <Endpoint_Read_Control_Stream_LE>:
     4a0:	61 15       	cp	r22, r1
     4a2:	71 05       	cpc	r23, r1
     4a4:	29 f4       	brne	.+10     	; 0x4b0 <Endpoint_Read_Control_Stream_LE+0x10>
     4a6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4aa:	2b 77       	andi	r18, 0x7B	; 123
     4ac:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4b0:	fc 01       	movw	r30, r24
     4b2:	61 15       	cp	r22, r1
     4b4:	71 05       	cpc	r23, r1
     4b6:	41 f1       	breq	.+80     	; 0x508 <Endpoint_Read_Control_Stream_LE+0x68>
     4b8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>
     4bc:	88 23       	and	r24, r24
     4be:	61 f1       	breq	.+88     	; 0x518 <Endpoint_Read_Control_Stream_LE+0x78>
     4c0:	85 30       	cpi	r24, 0x05	; 5
     4c2:	61 f1       	breq	.+88     	; 0x51c <Endpoint_Read_Control_Stream_LE+0x7c>
     4c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4c8:	83 fd       	sbrc	r24, 3
     4ca:	24 c0       	rjmp	.+72     	; 0x514 <Endpoint_Read_Control_Stream_LE+0x74>
     4cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4d0:	82 ff       	sbrs	r24, 2
     4d2:	ef cf       	rjmp	.-34     	; 0x4b2 <Endpoint_Read_Control_Stream_LE+0x12>
     4d4:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     4d8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	92 2b       	or	r25, r18
     4e0:	89 2b       	or	r24, r25
     4e2:	31 f0       	breq	.+12     	; 0x4f0 <Endpoint_Read_Control_Stream_LE+0x50>
     4e4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4e8:	81 93       	st	Z+, r24
     4ea:	61 50       	subi	r22, 0x01	; 1
     4ec:	71 09       	sbc	r23, r1
     4ee:	91 f7       	brne	.-28     	; 0x4d4 <Endpoint_Read_Control_Stream_LE+0x34>
     4f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4f4:	8b 77       	andi	r24, 0x7B	; 123
     4f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4fa:	db cf       	rjmp	.-74     	; 0x4b2 <Endpoint_Read_Control_Stream_LE+0x12>
     4fc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>
     500:	88 23       	and	r24, r24
     502:	51 f0       	breq	.+20     	; 0x518 <Endpoint_Read_Control_Stream_LE+0x78>
     504:	85 30       	cpi	r24, 0x05	; 5
     506:	51 f0       	breq	.+20     	; 0x51c <Endpoint_Read_Control_Stream_LE+0x7c>
     508:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     50c:	80 ff       	sbrs	r24, 0
     50e:	f6 cf       	rjmp	.-20     	; 0x4fc <Endpoint_Read_Control_Stream_LE+0x5c>
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	08 95       	ret
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	08 95       	ret
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	08 95       	ret
     51c:	83 e0       	ldi	r24, 0x03	; 3
     51e:	08 95       	ret

00000520 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     520:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <USB_ControlRequest+0x6>
     524:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <USB_ControlRequest+0x7>
     528:	26 17       	cp	r18, r22
     52a:	37 07       	cpc	r19, r23
     52c:	48 f0       	brcs	.+18     	; 0x540 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     52e:	61 15       	cp	r22, r1
     530:	71 05       	cpc	r23, r1
     532:	39 f4       	brne	.+14     	; 0x542 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     534:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     538:	2e 77       	andi	r18, 0x7E	; 126
     53a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     53e:	01 c0       	rjmp	.+2      	; 0x542 <Endpoint_Write_Control_PStream_LE+0x22>
     540:	b9 01       	movw	r22, r18
     542:	fc 01       	movw	r30, r24
     544:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     546:	61 15       	cp	r22, r1
     548:	71 05       	cpc	r23, r1
     54a:	91 f1       	breq	.+100    	; 0x5b0 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     54c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     550:	88 23       	and	r24, r24
     552:	09 f4       	brne	.+2      	; 0x556 <Endpoint_Write_Control_PStream_LE+0x36>
     554:	40 c0       	rjmp	.+128    	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     556:	85 30       	cpi	r24, 0x05	; 5
     558:	09 f4       	brne	.+2      	; 0x55c <Endpoint_Write_Control_PStream_LE+0x3c>
     55a:	3f c0       	rjmp	.+126    	; 0x5da <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     55c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     560:	83 fd       	sbrc	r24, 3
     562:	3d c0       	rjmp	.+122    	; 0x5de <Endpoint_Write_Control_PStream_LE+0xbe>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     564:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     568:	82 fd       	sbrc	r24, 2
     56a:	2f c0       	rjmp	.+94     	; 0x5ca <Endpoint_Write_Control_PStream_LE+0xaa>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     56c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
     570:	80 ff       	sbrs	r24, 0
     572:	e9 cf       	rjmp	.-46     	; 0x546 <Endpoint_Write_Control_PStream_LE+0x26>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     574:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     578:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     580:	61 15       	cp	r22, r1
     582:	71 05       	cpc	r23, r1
     584:	59 f0       	breq	.+22     	; 0x59c <Endpoint_Write_Control_PStream_LE+0x7c>
     586:	88 30       	cpi	r24, 0x08	; 8
     588:	91 05       	cpc	r25, r1
     58a:	40 f4       	brcc	.+16     	; 0x59c <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     58c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     58e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     592:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     594:	61 50       	subi	r22, 0x01	; 1
     596:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	f2 cf       	rjmp	.-28     	; 0x580 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     59c:	21 e0       	ldi	r18, 0x01	; 1
     59e:	08 97       	sbiw	r24, 0x08	; 8
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <Endpoint_Write_Control_PStream_LE+0x84>
     5a2:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5a8:	8e 77       	andi	r24, 0x7E	; 126
     5aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5ae:	cb cf       	rjmp	.-106    	; 0x546 <Endpoint_Write_Control_PStream_LE+0x26>
	while (Length || LastPacketFull)
     5b0:	21 11       	cpse	r18, r1
     5b2:	cc cf       	rjmp	.-104    	; 0x54c <Endpoint_Write_Control_PStream_LE+0x2c>
     5b4:	0a c0       	rjmp	.+20     	; 0x5ca <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5b6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5ba:	88 23       	and	r24, r24
     5bc:	61 f0       	breq	.+24     	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5be:	85 30       	cpi	r24, 0x05	; 5
     5c0:	61 f0       	breq	.+24     	; 0x5da <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5c6:	83 fd       	sbrc	r24, 3
     5c8:	0a c0       	rjmp	.+20     	; 0x5de <Endpoint_Write_Control_PStream_LE+0xbe>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
     5ce:	82 ff       	sbrs	r24, 2
     5d0:	f2 cf       	rjmp	.-28     	; 0x5b6 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5de:	81 e0       	ldi	r24, 0x01	; 1
}
     5e0:	08 95       	ret

000005e2 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     5e2:	98 2f       	mov	r25, r24
     5e4:	97 30       	cpi	r25, 0x07	; 7
     5e6:	68 f5       	brcc	.+90     	; 0x642 <Endpoint_ConfigureEndpoint_Prv+0x60>
     5e8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     5ec:	98 17       	cp	r25, r24
     5ee:	39 f0       	breq	.+14     	; 0x5fe <Endpoint_ConfigureEndpoint_Prv+0x1c>
     5f0:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     5f4:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     5f8:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <Endpoint_ConfigureEndpoint_Prv+0x22>
     5fe:	24 2f       	mov	r18, r20
     600:	76 2f       	mov	r23, r22
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	21 fd       	sbrc	r18, 1
     606:	02 c0       	rjmp	.+4      	; 0x60c <Endpoint_ConfigureEndpoint_Prv+0x2a>
     608:	9f 5f       	subi	r25, 0xFF	; 255
     60a:	ec cf       	rjmp	.-40     	; 0x5e4 <Endpoint_ConfigureEndpoint_Prv+0x2>
     60c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     610:	3e 7f       	andi	r19, 0xFE	; 254
     612:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     616:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     61a:	3d 7f       	andi	r19, 0xFD	; 253
     61c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     620:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     624:	31 60       	ori	r19, 0x01	; 1
     626:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     62a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     62e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     632:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     636:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     63a:	27 fd       	sbrc	r18, 7
     63c:	e5 cf       	rjmp	.-54     	; 0x608 <Endpoint_ConfigureEndpoint_Prv+0x26>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	08 95       	ret
     642:	8f 70       	andi	r24, 0x0F	; 15
     644:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	08 95       	ret

0000064c <Endpoint_ConfigureEndpointTable>:
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	06 2f       	mov	r16, r22
     656:	ec 01       	movw	r28, r24
     658:	24 96       	adiw	r28, 0x04	; 4
     65a:	10 e0       	ldi	r17, 0x00	; 0
     65c:	10 17       	cp	r17, r16
     65e:	99 f1       	breq	.+102    	; 0x6c6 <Endpoint_ConfigureEndpointTable+0x7a>
     660:	fe 01       	movw	r30, r28
     662:	34 97       	sbiw	r30, 0x04	; 4
     664:	60 81       	ld	r22, Z
     666:	61 11       	cpse	r22, r1
     668:	03 c0       	rjmp	.+6      	; 0x670 <Endpoint_ConfigureEndpointTable+0x24>
     66a:	1f 5f       	subi	r17, 0xFF	; 255
     66c:	25 96       	adiw	r28, 0x05	; 5
     66e:	f6 cf       	rjmp	.-20     	; 0x65c <Endpoint_ConfigureEndpointTable+0x10>
     670:	28 81       	ld	r18, Y
     672:	fe 01       	movw	r30, r28
     674:	33 97       	sbiw	r30, 0x03	; 3
     676:	a0 81       	ld	r26, Z
     678:	b1 81       	ldd	r27, Z+1	; 0x01
     67a:	32 96       	adiw	r30, 0x02	; 2
     67c:	90 81       	ld	r25, Z
     67e:	86 2f       	mov	r24, r22
     680:	8f 70       	andi	r24, 0x0F	; 15
     682:	87 30       	cpi	r24, 0x07	; 7
     684:	10 f0       	brcs	.+4      	; 0x68a <Endpoint_ConfigureEndpointTable+0x3e>
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	1f c0       	rjmp	.+62     	; 0x6c8 <Endpoint_ConfigureEndpointTable+0x7c>
     68a:	22 30       	cpi	r18, 0x02	; 2
     68c:	10 f4       	brcc	.+4      	; 0x692 <Endpoint_ConfigureEndpointTable+0x46>
     68e:	42 e0       	ldi	r20, 0x02	; 2
     690:	01 c0       	rjmp	.+2      	; 0x694 <Endpoint_ConfigureEndpointTable+0x48>
     692:	46 e0       	ldi	r20, 0x06	; 6
     694:	e8 e0       	ldi	r30, 0x08	; 8
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	ea 17       	cp	r30, r26
     69c:	fb 07       	cpc	r31, r27
     69e:	20 f4       	brcc	.+8      	; 0x6a8 <Endpoint_ConfigureEndpointTable+0x5c>
     6a0:	2f 5f       	subi	r18, 0xFF	; 255
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	f9 cf       	rjmp	.-14     	; 0x69a <Endpoint_ConfigureEndpointTable+0x4e>
     6a8:	22 95       	swap	r18
     6aa:	20 7f       	andi	r18, 0xF0	; 240
     6ac:	42 2b       	or	r20, r18
     6ae:	50 e4       	ldi	r21, 0x40	; 64
     6b0:	95 9f       	mul	r25, r21
     6b2:	90 01       	movw	r18, r0
     6b4:	11 24       	eor	r1, r1
     6b6:	66 1f       	adc	r22, r22
     6b8:	66 27       	eor	r22, r22
     6ba:	66 1f       	adc	r22, r22
     6bc:	62 2b       	or	r22, r18
     6be:	91 df       	rcall	.-222    	; 0x5e2 <Endpoint_ConfigureEndpoint_Prv>
     6c0:	81 11       	cpse	r24, r1
     6c2:	d3 cf       	rjmp	.-90     	; 0x66a <Endpoint_ConfigureEndpointTable+0x1e>
     6c4:	e0 cf       	rjmp	.-64     	; 0x686 <Endpoint_ConfigureEndpointTable+0x3a>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	08 95       	ret

000006d2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6d2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_ControlRequest>
     6d6:	87 ff       	sbrs	r24, 7
     6d8:	11 c0       	rjmp	.+34     	; 0x6fc <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     6de:	82 fd       	sbrc	r24, 2
     6e0:	05 c0       	rjmp	.+10     	; 0x6ec <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6e2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>
     6e6:	81 11       	cpse	r24, r1
     6e8:	f8 cf       	rjmp	.-16     	; 0x6da <Endpoint_ClearStatusStage+0x8>
     6ea:	11 c0       	rjmp	.+34     	; 0x70e <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6f0:	8b 77       	andi	r24, 0x7B	; 123
     6f2:	0b c0       	rjmp	.+22     	; 0x70a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6f4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>
     6f8:	88 23       	and	r24, r24
     6fa:	49 f0       	breq	.+18     	; 0x70e <Endpoint_ClearStatusStage+0x3c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
     700:	80 ff       	sbrs	r24, 0
     702:	f8 cf       	rjmp	.-16     	; 0x6f4 <Endpoint_ClearStatusStage+0x22>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     704:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     708:	8e 77       	andi	r24, 0x7E	; 126
     70a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     70e:	08 95       	ret

00000710 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     710:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     714:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     718:	95 e6       	ldi	r25, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     71a:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     71e:	84 2f       	mov	r24, r20
     720:	81 70       	andi	r24, 0x01	; 1
     722:	40 ff       	sbrs	r20, 0
     724:	23 c0       	rjmp	.+70     	; 0x76c <Endpoint_WaitUntilReady+0x5c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     726:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     72a:	80 fd       	sbrc	r24, 0
     72c:	1d c0       	rjmp	.+58     	; 0x768 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     72e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     732:	88 23       	and	r24, r24
     734:	99 f0       	breq	.+38     	; 0x75c <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     736:	85 30       	cpi	r24, 0x05	; 5
     738:	99 f0       	breq	.+38     	; 0x760 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     73a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     73e:	85 fd       	sbrc	r24, 5
     740:	11 c0       	rjmp	.+34     	; 0x764 <Endpoint_WaitUntilReady+0x54>
     742:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     746:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     74a:	24 17       	cp	r18, r20
     74c:	35 07       	cpc	r19, r21
     74e:	29 f3       	breq	.-54     	; 0x71a <Endpoint_WaitUntilReady+0xa>
     750:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     752:	11 f0       	breq	.+4      	; 0x758 <Endpoint_WaitUntilReady+0x48>
     754:	9a 01       	movw	r18, r20
     756:	e1 cf       	rjmp	.-62     	; 0x71a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     758:	84 e0       	ldi	r24, 0x04	; 4
     75a:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
     760:	83 e0       	ldi	r24, 0x03	; 3
     762:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     76c:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsOUTReceived())
     770:	42 ff       	sbrs	r20, 2
     772:	dd cf       	rjmp	.-70     	; 0x72e <Endpoint_WaitUntilReady+0x1e>
		}
	}
}
     774:	08 95       	ret

00000776 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     77e:	4b d0       	rcall	.+150    	; 0x816 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     780:	52 d0       	rcall	.+164    	; 0x826 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     782:	c8 ed       	ldi	r28, 0xD8	; 216
     784:	d0 e0       	ldi	r29, 0x00	; 0
     786:	88 81       	ld	r24, Y
     788:	8f 77       	andi	r24, 0x7F	; 127
     78a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     78c:	88 81       	ld	r24, Y
     78e:	80 68       	ori	r24, 0x80	; 128
     790:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
     792:	88 81       	ld	r24, Y
     794:	8f 7d       	andi	r24, 0xDF	; 223
     796:	88 83       	st	Y, r24
				PLLCSR = 0;
     798:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     79a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     79e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7a2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7a6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7aa:	00 ee       	ldi	r16, 0xE0	; 224
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	f8 01       	movw	r30, r16
     7b0:	80 81       	ld	r24, Z
     7b2:	8b 7f       	andi	r24, 0xFB	; 251
     7b4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7b6:	88 81       	ld	r24, Y
     7b8:	81 60       	ori	r24, 0x01	; 1
     7ba:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
     7bc:	42 e0       	ldi	r20, 0x02	; 2
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0f df       	rcall	.-482    	; 0x5e2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7c4:	e1 ee       	ldi	r30, 0xE1	; 225
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	8e 7f       	andi	r24, 0xFE	; 254
     7cc:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
     7ce:	e2 ee       	ldi	r30, 0xE2	; 226
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	81 60       	ori	r24, 0x01	; 1
     7d6:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
     7d8:	80 81       	ld	r24, Z
     7da:	88 60       	ori	r24, 0x08	; 8
     7dc:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
     7de:	f8 01       	movw	r30, r16
     7e0:	80 81       	ld	r24, Z
     7e2:	8e 7f       	andi	r24, 0xFE	; 254
     7e4:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
     7e6:	88 81       	ld	r24, Y
     7e8:	80 61       	ori	r24, 0x10	; 16
     7ea:	88 83       	st	Y, r24
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
     7f6:	e8 ed       	ldi	r30, 0xD8	; 216
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8f 7e       	andi	r24, 0xEF	; 239
     7fe:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
     800:	e7 ed       	ldi	r30, 0xD7	; 215
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	81 60       	ori	r24, 0x01	; 1
     808:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_IsInitialized>
	USB_ResetInterface();
     814:	b0 cf       	rjmp	.-160    	; 0x776 <USB_ResetInterface>

00000816 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     816:	e8 ed       	ldi	r30, 0xD8	; 216
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	8e 7f       	andi	r24, 0xFE	; 254
     81e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     820:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     824:	08 95       	ret

00000826 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     826:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     82a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     82e:	08 95       	ret

00000830 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     830:	1f 92       	push	r1
     832:	0f 92       	push	r0
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	0f 92       	push	r0
     838:	11 24       	eor	r1, r1
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	6f 93       	push	r22
     844:	7f 93       	push	r23
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     852:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     856:	82 ff       	sbrs	r24, 2
     858:	0a c0       	rjmp	.+20     	; 0x86e <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
     85a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     85e:	82 ff       	sbrs	r24, 2
     860:	06 c0       	rjmp	.+12     	; 0x86e <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
     862:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     866:	8b 7f       	andi	r24, 0xFB	; 251
     868:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     86c:	f3 dc       	rcall	.-1562   	; 0x254 <EVENT_USB_Device_StartOfFrame>
						return (USBINT & (1 << VBUSTI));
     86e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     872:	80 ff       	sbrs	r24, 0
     874:	1d c0       	rjmp	.+58     	; 0x8b0 <__vector_10+0x80>
						return (USBCON & (1 << VBUSTE));
     876:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     87a:	80 ff       	sbrs	r24, 0
     87c:	19 c0       	rjmp	.+50     	; 0x8b0 <__vector_10+0x80>
						USBINT &= ~(1 << VBUSTI);
     87e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     882:	8e 7f       	andi	r24, 0xFE	; 254
     884:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     888:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     88c:	80 ff       	sbrs	r24, 0
     88e:	0c c0       	rjmp	.+24     	; 0x8a8 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     890:	80 e1       	ldi	r24, 0x10	; 16
     892:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     894:	82 e1       	ldi	r24, 0x12	; 18
     896:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     898:	09 b4       	in	r0, 0x29	; 41
     89a:	00 fe       	sbrs	r0, 0
     89c:	fd cf       	rjmp	.-6      	; 0x898 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     8a4:	c2 dc       	rcall	.-1660   	; 0x22a <EVENT_USB_Device_Connect>
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8a8:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8aa:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     8ae:	bf dc       	rcall	.-1666   	; 0x22e <EVENT_USB_Device_Disconnect>
						return (UDINT  & (1 << SUSPI));
     8b0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8b4:	80 ff       	sbrs	r24, 0
     8b6:	18 c0       	rjmp	.+48     	; 0x8e8 <__vector_10+0xb8>
						return (UDIEN  & (1 << SUSPE));
     8b8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     8bc:	80 ff       	sbrs	r24, 0
     8be:	14 c0       	rjmp	.+40     	; 0x8e8 <__vector_10+0xb8>
						UDIEN  &= ~(1 << SUSPE);
     8c0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     8c4:	8e 7f       	andi	r24, 0xFE	; 254
     8c6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
     8ca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     8ce:	80 61       	ori	r24, 0x10	; 16
     8d0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8d4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     8d8:	80 62       	ori	r24, 0x20	; 32
     8da:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
     8de:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     8e0:	85 e0       	ldi	r24, 0x05	; 5
     8e2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     8e6:	cb d1       	rcall	.+918    	; 0xc7e <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
     8e8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8ec:	84 ff       	sbrs	r24, 4
     8ee:	2f c0       	rjmp	.+94     	; 0x94e <__vector_10+0x11e>
						return (UDIEN  & (1 << WAKEUPE));
     8f0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     8f4:	84 ff       	sbrs	r24, 4
     8f6:	2b c0       	rjmp	.+86     	; 0x94e <__vector_10+0x11e>
				PLLCSR = USB_PLL_PSC;
     8f8:	80 e1       	ldi	r24, 0x10	; 16
     8fa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8fc:	82 e1       	ldi	r24, 0x12	; 18
     8fe:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     900:	09 b4       	in	r0, 0x29	; 41
     902:	00 fe       	sbrs	r0, 0
     904:	fd cf       	rjmp	.-6      	; 0x900 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     906:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     90a:	8f 7d       	andi	r24, 0xDF	; 223
     90c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
     910:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     914:	8f 7e       	andi	r24, 0xEF	; 239
     916:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
     91a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     91e:	8f 7e       	andi	r24, 0xEF	; 239
     920:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
     924:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     928:	81 60       	ori	r24, 0x01	; 1
     92a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     92e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_Device_ConfigurationNumber>
     932:	88 23       	and	r24, r24
     934:	11 f0       	breq	.+4      	; 0x93a <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	07 c0       	rjmp	.+14     	; 0x948 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     93a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     93e:	87 fd       	sbrc	r24, 7
     940:	02 c0       	rjmp	.+4      	; 0x946 <__vector_10+0x116>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	01 c0       	rjmp	.+2      	; 0x948 <__vector_10+0x118>
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     94c:	98 d1       	rcall	.+816    	; 0xc7e <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
     94e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     952:	83 ff       	sbrs	r24, 3
     954:	22 c0       	rjmp	.+68     	; 0x99a <__vector_10+0x16a>
						return (UDIEN  & (1 << EORSTE));
     956:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     95a:	83 ff       	sbrs	r24, 3
     95c:	1e c0       	rjmp	.+60     	; 0x99a <__vector_10+0x16a>
						UDINT  &= ~(1 << EORSTI);
     95e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     962:	87 7f       	andi	r24, 0xF7	; 247
     964:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     96e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
     972:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     976:	8e 7f       	andi	r24, 0xFE	; 254
     978:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
     97c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     980:	8e 7f       	andi	r24, 0xFE	; 254
     982:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
     986:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     98a:	80 61       	ori	r24, 0x10	; 16
     98c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     990:	42 e0       	ldi	r20, 0x02	; 2
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	25 de       	rcall	.-950    	; 0x5e2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     998:	72 d1       	rcall	.+740    	; 0xc7e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	aa 97       	sbiw	r28, 0x2a	; 42
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	e9 e1       	ldi	r30, 0x19	; 25
     9d4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9d6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9da:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9dc:	21 e0       	ldi	r18, 0x01	; 1
     9de:	e1 32       	cpi	r30, 0x21	; 33
     9e0:	f2 07       	cpc	r31, r18
     9e2:	c9 f7       	brne	.-14     	; 0x9d6 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
     9e4:	34 dc       	rcall	.-1944   	; 0x24e <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     9ea:	83 ff       	sbrs	r24, 3
     9ec:	30 c1       	rjmp	.+608    	; 0xc4e <__stack+0x14f>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9ee:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     9f2:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <USB_ControlRequest+0x1>
     9f6:	95 30       	cpi	r25, 0x05	; 5
     9f8:	09 f4       	brne	.+2      	; 0x9fc <USB_Device_ProcessControlRequest+0x40>
     9fa:	83 c0       	rjmp	.+262    	; 0xb02 <__stack+0x3>
     9fc:	30 f4       	brcc	.+12     	; 0xa0a <USB_Device_ProcessControlRequest+0x4e>
     9fe:	91 30       	cpi	r25, 0x01	; 1
     a00:	a9 f1       	breq	.+106    	; 0xa6c <USB_Device_ProcessControlRequest+0xb0>
     a02:	68 f0       	brcs	.+26     	; 0xa1e <USB_Device_ProcessControlRequest+0x62>
     a04:	93 30       	cpi	r25, 0x03	; 3
     a06:	91 f1       	breq	.+100    	; 0xa6c <USB_Device_ProcessControlRequest+0xb0>
     a08:	22 c1       	rjmp	.+580    	; 0xc4e <__stack+0x14f>
     a0a:	98 30       	cpi	r25, 0x08	; 8
     a0c:	09 f4       	brne	.+2      	; 0xa10 <USB_Device_ProcessControlRequest+0x54>
     a0e:	ef c0       	rjmp	.+478    	; 0xbee <__stack+0xef>
     a10:	99 30       	cpi	r25, 0x09	; 9
     a12:	09 f4       	brne	.+2      	; 0xa16 <USB_Device_ProcessControlRequest+0x5a>
     a14:	fb c0       	rjmp	.+502    	; 0xc0c <__stack+0x10d>
     a16:	96 30       	cpi	r25, 0x06	; 6
     a18:	09 f0       	breq	.+2      	; 0xa1c <USB_Device_ProcessControlRequest+0x60>
     a1a:	19 c1       	rjmp	.+562    	; 0xc4e <__stack+0x14f>
     a1c:	94 c0       	rjmp	.+296    	; 0xb46 <__stack+0x47>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a1e:	80 38       	cpi	r24, 0x80	; 128
     a20:	21 f0       	breq	.+8      	; 0xa2a <USB_Device_ProcessControlRequest+0x6e>
     a22:	82 38       	cpi	r24, 0x82	; 130
     a24:	09 f0       	breq	.+2      	; 0xa28 <USB_Device_ProcessControlRequest+0x6c>
     a26:	13 c1       	rjmp	.+550    	; 0xc4e <__stack+0x14f>
     a28:	08 c0       	rjmp	.+16     	; 0xa3a <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a2a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a2e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <USB_Device_RemoteWakeupEnabled>
     a32:	99 23       	and	r25, r25
     a34:	89 f0       	breq	.+34     	; 0xa58 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a36:	82 60       	ori	r24, 0x02	; 2
     a38:	0f c0       	rjmp	.+30     	; 0xa58 <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a3a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x4>
     a3e:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     a40:	87 30       	cpi	r24, 0x07	; 7
     a42:	08 f0       	brcs	.+2      	; 0xa46 <USB_Device_ProcessControlRequest+0x8a>
     a44:	04 c1       	rjmp	.+520    	; 0xc4e <__stack+0x14f>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a46:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a4a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     a4e:	85 fb       	bst	r24, 5
     a50:	88 27       	eor	r24, r24
     a52:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a54:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
     a58:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a5c:	97 7f       	andi	r25, 0xF7	; 247
     a5e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a62:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     a66:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a6a:	cc c0       	rjmp	.+408    	; 0xc04 <__stack+0x105>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a6c:	28 2f       	mov	r18, r24
     a6e:	2d 7f       	andi	r18, 0xFD	; 253
     a70:	09 f0       	breq	.+2      	; 0xa74 <USB_Device_ProcessControlRequest+0xb8>
     a72:	ed c0       	rjmp	.+474    	; 0xc4e <__stack+0x14f>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a74:	88 23       	and	r24, r24
     a76:	19 f0       	breq	.+6      	; 0xa7e <USB_Device_ProcessControlRequest+0xc2>
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	61 f0       	breq	.+24     	; 0xa94 <USB_Device_ProcessControlRequest+0xd8>
     a7c:	e8 c0       	rjmp	.+464    	; 0xc4e <__stack+0x14f>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a7e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	09 f0       	breq	.+2      	; 0xa88 <USB_Device_ProcessControlRequest+0xcc>
     a86:	e3 c0       	rjmp	.+454    	; 0xc4e <__stack+0x14f>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a88:	93 30       	cpi	r25, 0x03	; 3
     a8a:	09 f0       	breq	.+2      	; 0xa8e <USB_Device_ProcessControlRequest+0xd2>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <USB_Device_RemoteWakeupEnabled>
     a92:	2e c0       	rjmp	.+92     	; 0xaf0 <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a94:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
     a98:	81 11       	cpse	r24, r1
     a9a:	2a c0       	rjmp	.+84     	; 0xaf0 <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a9c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x4>
     aa0:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     aa2:	2f ef       	ldi	r18, 0xFF	; 255
     aa4:	28 0f       	add	r18, r24
     aa6:	26 30       	cpi	r18, 0x06	; 6
     aa8:	08 f0       	brcs	.+2      	; 0xaac <USB_Device_ProcessControlRequest+0xf0>
     aaa:	d1 c0       	rjmp	.+418    	; 0xc4e <__stack+0x14f>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
     ab0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ab4:	20 ff       	sbrs	r18, 0
     ab6:	1c c0       	rjmp	.+56     	; 0xaf0 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ab8:	93 30       	cpi	r25, 0x03	; 3
     aba:	21 f4       	brne	.+8      	; 0xac4 <USB_Device_ProcessControlRequest+0x108>
				UECONX |= (1 << STALLRQ);
     abc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ac0:	80 62       	ori	r24, 0x20	; 32
     ac2:	14 c0       	rjmp	.+40     	; 0xaec <USB_Device_ProcessControlRequest+0x130>
				UECONX |= (1 << STALLRQC);
     ac4:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ac8:	90 61       	ori	r25, 0x10	; 16
     aca:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ace:	21 e0       	ldi	r18, 0x01	; 1
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	a9 01       	movw	r20, r18
     ad4:	02 c0       	rjmp	.+4      	; 0xada <USB_Device_ProcessControlRequest+0x11e>
     ad6:	44 0f       	add	r20, r20
     ad8:	55 1f       	adc	r21, r21
     ada:	8a 95       	dec	r24
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <USB_Device_ProcessControlRequest+0x11a>
     ade:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     ae2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
     ae6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     aea:	88 60       	ori	r24, 0x08	; 8
     aec:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     af0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
     af4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     af8:	87 7f       	andi	r24, 0xF7	; 247
     afa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     afe:	e9 dd       	rcall	.-1070   	; 0x6d2 <Endpoint_ClearStatusStage>
     b00:	a6 c0       	rjmp	.+332    	; 0xc4e <__stack+0x14f>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b02:	81 11       	cpse	r24, r1
     b04:	a4 c0       	rjmp	.+328    	; 0xc4e <__stack+0x14f>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b06:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
     b0a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b0c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     b10:	80 78       	andi	r24, 0x80	; 128
     b12:	81 2b       	or	r24, r17
     b14:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     b18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b1c:	87 7f       	andi	r24, 0xF7	; 247
     b1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
     b22:	d7 dd       	rcall	.-1106   	; 0x6d2 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
     b28:	80 ff       	sbrs	r24, 0
     b2a:	fc cf       	rjmp	.-8      	; 0xb24 <__stack+0x25>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     b2c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     b30:	80 68       	ori	r24, 0x80	; 128
     b32:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b36:	11 11       	cpse	r17, r1
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <__stack+0x3f>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <__stack+0x41>
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_DeviceState>
     b44:	84 c0       	rjmp	.+264    	; 0xc4e <__stack+0x14f>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b46:	80 58       	subi	r24, 0x80	; 128
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	08 f0       	brcs	.+2      	; 0xb4e <__stack+0x4f>
     b4c:	80 c0       	rjmp	.+256    	; 0xc4e <__stack+0x14f>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b4e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
     b52:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <USB_ControlRequest+0x3>
     b56:	8c 3d       	cpi	r24, 0xDC	; 220
     b58:	53 e0       	ldi	r21, 0x03	; 3
     b5a:	95 07       	cpc	r25, r21
     b5c:	71 f5       	brne	.+92     	; 0xbba <__stack+0xbb>
	SignatureDescriptor.Header.Type = DTYPE_String;
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b62:	8a e2       	ldi	r24, 0x2A	; 42
     b64:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b66:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b68:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b6a:	de 01       	movw	r26, r28
     b6c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b6e:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b70:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b72:	51 e2       	ldi	r21, 0x21	; 33
     b74:	e3 2f       	mov	r30, r19
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     b7c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     b7e:	20 ff       	sbrs	r18, 0
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <__stack+0x89>
					{
						SerialByte >>= 4;
     b82:	e2 95       	swap	r30
     b84:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b86:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b88:	ef 70       	andi	r30, 0x0F	; 15
     b8a:	8e 2f       	mov	r24, r30
     b8c:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b8e:	ea 30       	cpi	r30, 0x0A	; 10
     b90:	10 f0       	brcs	.+4      	; 0xb96 <__stack+0x97>
     b92:	c7 96       	adiw	r24, 0x37	; 55
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <__stack+0x99>
     b96:	c0 96       	adiw	r24, 0x30	; 48
     b98:	8d 93       	st	X+, r24
     b9a:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b9c:	2f 5f       	subi	r18, 0xFF	; 255
     b9e:	24 31       	cpi	r18, 0x14	; 20
     ba0:	49 f7       	brne	.-46     	; 0xb74 <__stack+0x75>
				SREG = GlobalIntState;
     ba2:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
     ba4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ba8:	87 7f       	andi	r24, 0xF7	; 247
     baa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bae:	6a e2       	ldi	r22, 0x2A	; 42
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	16 dc       	rcall	.-2004   	; 0x3e4 <Endpoint_Write_Control_Stream_LE>
     bb8:	14 c0       	rjmp	.+40     	; 0xbe2 <__stack+0xe3>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     bba:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <USB_ControlRequest+0x4>
     bbe:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <USB_ControlRequest+0x5>
     bc2:	ae 01       	movw	r20, r28
     bc4:	4f 5f       	subi	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	82 db       	rcall	.-2300   	; 0x2ce <CALLBACK_USB_GetDescriptor>
     bca:	bc 01       	movw	r22, r24
     bcc:	89 2b       	or	r24, r25
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__stack+0xd3>
     bd0:	3e c0       	rjmp	.+124    	; 0xc4e <__stack+0x14f>
     bd2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bd6:	97 7f       	andi	r25, 0xF7	; 247
     bd8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	9f dc       	rcall	.-1730   	; 0x520 <Endpoint_Write_Control_PStream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     be2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     be6:	8b 77       	andi	r24, 0x7B	; 123
     be8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bec:	30 c0       	rjmp	.+96     	; 0xc4e <__stack+0x14f>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     bee:	80 38       	cpi	r24, 0x80	; 128
     bf0:	71 f5       	brne	.+92     	; 0xc4e <__stack+0x14f>
				UEINTX &= ~(1 << RXSTPI);
     bf2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bf6:	87 7f       	andi	r24, 0xF7	; 247
     bf8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     bfc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
     c00:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c08:	8e 77       	andi	r24, 0x7E	; 126
     c0a:	77 cf       	rjmp	.-274    	; 0xafa <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c0c:	81 11       	cpse	r24, r1
     c0e:	1f c0       	rjmp	.+62     	; 0xc4e <__stack+0x14f>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c10:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
     c14:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <USB_ControlRequest+0x3>
     c18:	99 27       	eor	r25, r25
     c1a:	02 97       	sbiw	r24, 0x02	; 2
     c1c:	c4 f4       	brge	.+48     	; 0xc4e <__stack+0x14f>
				UEINTX &= ~(1 << RXSTPI);
     c1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c22:	87 7f       	andi	r24, 0xF7	; 247
     c24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c28:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
     c2c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
     c30:	50 dd       	rcall	.-1376   	; 0x6d2 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
     c32:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_Device_ConfigurationNumber>
     c36:	81 11       	cpse	r24, r1
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <__stack+0x147>
				return (UDADDR & (1 << ADDEN));
     c3a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c3e:	87 fd       	sbrc	r24, 7
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <__stack+0x147>
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <__stack+0x149>
     c46:	84 e0       	ldi	r24, 0x04	; 4
     c48:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
     c4c:	f2 da       	rcall	.-2588   	; 0x232 <EVENT_USB_Device_ConfigurationChanged>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
     c52:	83 ff       	sbrs	r24, 3
     c54:	0a c0       	rjmp	.+20     	; 0xc6a <__stack+0x16b>
				UEINTX &= ~(1 << RXSTPI);
     c56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c5a:	87 7f       	andi	r24, 0xF7	; 247
     c5c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
     c60:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     c64:	80 62       	ori	r24, 0x20	; 32
     c66:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
     c6a:	aa 96       	adiw	r28, 0x2a	; 42
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	08 95       	ret

00000c7e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     c7e:	08 95       	ret

00000c80 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c80:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     c82:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>
     c86:	88 23       	and	r24, r24
     c88:	99 f0       	breq	.+38     	; 0xcb0 <USB_USBTask+0x30>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c8a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     c8e:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c90:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     c94:	89 2f       	mov	r24, r25
     c96:	81 70       	andi	r24, 0x01	; 1
     c98:	90 fd       	sbrc	r25, 0
     c9a:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c9c:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c9e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ca2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     ca6:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     ca8:	89 de       	rcall	.-750    	; 0x9bc <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     caa:	cf 70       	andi	r28, 0x0F	; 15
     cac:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     cb4:	6f 92       	push	r6
     cb6:	7f 92       	push	r7
     cb8:	8f 92       	push	r8
     cba:	9f 92       	push	r9
     cbc:	af 92       	push	r10
     cbe:	bf 92       	push	r11
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <HID_Device_ProcessControlRequest+0x1e>
     cd2:	1f 92       	push	r1
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     cda:	cd b6       	in	r12, 0x3d	; 61
     cdc:	de b6       	in	r13, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
     ce2:	83 ff       	sbrs	r24, 3
     ce4:	09 c1       	rjmp	.+530    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     ce6:	f7 01       	movw	r30, r14
     ce8:	80 81       	ld	r24, Z
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <USB_ControlRequest+0x4>
     cf0:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <USB_ControlRequest+0x5>
     cf4:	28 17       	cp	r18, r24
     cf6:	39 07       	cpc	r19, r25
     cf8:	09 f0       	breq	.+2      	; 0xcfc <HID_Device_ProcessControlRequest+0x48>
     cfa:	fe c0       	rjmp	.+508    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
	switch (USB_ControlRequest.bRequest)
     cfc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x1>
     d00:	83 30       	cpi	r24, 0x03	; 3
     d02:	09 f4       	brne	.+2      	; 0xd06 <HID_Device_ProcessControlRequest+0x52>
     d04:	a0 c0       	rjmp	.+320    	; 0xe46 <HID_Device_ProcessControlRequest+0x192>
     d06:	30 f4       	brcc	.+12     	; 0xd14 <HID_Device_ProcessControlRequest+0x60>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	71 f0       	breq	.+28     	; 0xd28 <HID_Device_ProcessControlRequest+0x74>
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	09 f4       	brne	.+2      	; 0xd12 <HID_Device_ProcessControlRequest+0x5e>
     d10:	d7 c0       	rjmp	.+430    	; 0xec0 <HID_Device_ProcessControlRequest+0x20c>
     d12:	f2 c0       	rjmp	.+484    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
     d14:	8a 30       	cpi	r24, 0x0A	; 10
     d16:	09 f4       	brne	.+2      	; 0xd1a <HID_Device_ProcessControlRequest+0x66>
     d18:	bb c0       	rjmp	.+374    	; 0xe90 <HID_Device_ProcessControlRequest+0x1dc>
     d1a:	8b 30       	cpi	r24, 0x0B	; 11
     d1c:	09 f4       	brne	.+2      	; 0xd20 <HID_Device_ProcessControlRequest+0x6c>
     d1e:	a4 c0       	rjmp	.+328    	; 0xe68 <HID_Device_ProcessControlRequest+0x1b4>
     d20:	89 30       	cpi	r24, 0x09	; 9
     d22:	09 f0       	breq	.+2      	; 0xd26 <HID_Device_ProcessControlRequest+0x72>
     d24:	e9 c0       	rjmp	.+466    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
     d26:	51 c0       	rjmp	.+162    	; 0xdca <HID_Device_ProcessControlRequest+0x116>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d28:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_ControlRequest>
     d2c:	81 3a       	cpi	r24, 0xA1	; 161
     d2e:	09 f0       	breq	.+2      	; 0xd32 <HID_Device_ProcessControlRequest+0x7e>
     d30:	e3 c0       	rjmp	.+454    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
			{
     d32:	8d b6       	in	r8, 0x3d	; 61
     d34:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
     d36:	1a 82       	std	Y+2, r1	; 0x02
     d38:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d3a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
     d3e:	10 91 1c 01 	lds	r17, 0x011C	; 0x80011c <USB_ControlRequest+0x3>
     d42:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     d44:	f7 01       	movw	r30, r14
     d46:	80 85       	ldd	r24, Z+8	; 0x08
     d48:	48 2f       	mov	r20, r24
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	8d b7       	in	r24, 0x3d	; 61
     d4e:	9e b7       	in	r25, 0x3e	; 62
     d50:	84 1b       	sub	r24, r20
     d52:	95 0b       	sbc	r25, r21
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	9e bf       	out	0x3e, r25	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	8d bf       	out	0x3d, r24	; 61
     d5e:	ed b7       	in	r30, 0x3d	; 61
     d60:	fe b7       	in	r31, 0x3e	; 62
     d62:	31 96       	adiw	r30, 0x01	; 1
     d64:	5f 01       	movw	r10, r30
				memset(ReportData, 0, sizeof(ReportData));
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	cf 01       	movw	r24, r30
     d6c:	c7 d1       	rcall	.+910    	; 0x10fc <memset>
				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     d6e:	4f ef       	ldi	r20, 0xFF	; 255
     d70:	41 0f       	add	r20, r17
     d72:	8e 01       	movw	r16, r28
     d74:	0f 5f       	subi	r16, 0xFF	; 255
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	95 01       	movw	r18, r10
     d7a:	be 01       	movw	r22, r28
     d7c:	6d 5f       	subi	r22, 0xFD	; 253
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	c7 01       	movw	r24, r14
     d82:	74 da       	rcall	.-2840   	; 0x26c <CALLBACK_HID_Device_CreateHIDReport>
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     d84:	f7 01       	movw	r30, r14
     d86:	86 81       	ldd	r24, Z+6	; 0x06
     d88:	97 81       	ldd	r25, Z+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	21 f0       	breq	.+8      	; 0xd96 <HID_Device_ProcessControlRequest+0xe2>
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     d8e:	40 85       	ldd	r20, Z+8	; 0x08
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	b5 01       	movw	r22, r10
     d94:	aa d1       	rcall	.+852    	; 0x10ea <memcpy>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d96:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				if (ReportID)
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     da8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     dac:	69 81       	ldd	r22, Y+1	; 0x01
     dae:	7a 81       	ldd	r23, Y+2	; 0x02
     db0:	c5 01       	movw	r24, r10
     db2:	18 db       	rcall	.-2512   	; 0x3e4 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     db4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     db8:	8b 77       	andi	r24, 0x7B	; 123
     dba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	9e be       	out	0x3e, r9	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	8d be       	out	0x3d, r8	; 61
     dc8:	97 c0       	rjmp	.+302    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dca:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_ControlRequest>
     dce:	81 32       	cpi	r24, 0x21	; 33
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <HID_Device_ProcessControlRequest+0x120>
     dd2:	92 c0       	rjmp	.+292    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
			{
     dd4:	ad b6       	in	r10, 0x3d	; 61
     dd6:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     dd8:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <USB_ControlRequest+0x6>
     ddc:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     de0:	70 90 1b 01 	lds	r7, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
     de4:	60 90 1c 01 	lds	r6, 0x011C	; 0x80011c <USB_ControlRequest+0x3>
				uint8_t  ReportData[ReportSize];
     de8:	8d b7       	in	r24, 0x3d	; 61
     dea:	9e b7       	in	r25, 0x3e	; 62
     dec:	80 1b       	sub	r24, r16
     dee:	91 0b       	sbc	r25, r17
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	9e bf       	out	0x3e, r25	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	8d bf       	out	0x3d, r24	; 61
     dfa:	ed b7       	in	r30, 0x3d	; 61
     dfc:	fe b7       	in	r31, 0x3e	; 62
     dfe:	31 96       	adiw	r30, 0x01	; 1
     e00:	4f 01       	movw	r8, r30
				UEINTX &= ~(1 << RXSTPI);
     e02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e06:	87 7f       	andi	r24, 0xF7	; 247
     e08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     e0c:	b8 01       	movw	r22, r16
     e0e:	cf 01       	movw	r24, r30
     e10:	47 db       	rcall	.-2418   	; 0x4a0 <Endpoint_Read_Control_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e16:	8e 77       	andi	r24, 0x7E	; 126
     e18:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	71 10       	cpse	r7, r1
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <HID_Device_ProcessControlRequest+0x170>
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	08 1b       	sub	r16, r24
     e28:	19 0b       	sbc	r17, r25
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     e2a:	94 01       	movw	r18, r8
     e2c:	28 0f       	add	r18, r24
     e2e:	39 1f       	adc	r19, r25
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e30:	4f ef       	ldi	r20, 0xFF	; 255
     e32:	46 0d       	add	r20, r6
     e34:	67 2d       	mov	r22, r7
     e36:	c7 01       	movw	r24, r14
     e38:	49 da       	rcall	.-2926   	; 0x2cc <CALLBACK_HID_Device_ProcessHIDReport>
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	be be       	out	0x3e, r11	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	ad be       	out	0x3d, r10	; 61
     e44:	59 c0       	rjmp	.+178    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e46:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_ControlRequest>
     e4a:	81 3a       	cpi	r24, 0xA1	; 161
     e4c:	09 f0       	breq	.+2      	; 0xe50 <HID_Device_ProcessControlRequest+0x19c>
     e4e:	54 c0       	rjmp	.+168    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
				UEINTX &= ~(1 << RXSTPI);
     e50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e54:	87 7f       	andi	r24, 0xF7	; 247
     e56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsINReady()));
     e5e:	80 ff       	sbrs	r24, 0
     e60:	fc cf       	rjmp	.-8      	; 0xe5a <HID_Device_ProcessControlRequest+0x1a6>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     e62:	f7 01       	movw	r30, r14
     e64:	81 85       	ldd	r24, Z+9	; 0x09
     e66:	40 c0       	rjmp	.+128    	; 0xee8 <HID_Device_ProcessControlRequest+0x234>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e68:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_ControlRequest>
     e6c:	81 32       	cpi	r24, 0x21	; 33
     e6e:	09 f0       	breq	.+2      	; 0xe72 <HID_Device_ProcessControlRequest+0x1be>
     e70:	43 c0       	rjmp	.+134    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
				UEINTX &= ~(1 << RXSTPI);
     e72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e76:	87 7f       	andi	r24, 0xF7	; 247
     e78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
     e7c:	2a dc       	rcall	.-1964   	; 0x6d2 <Endpoint_ClearStatusStage>
				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     e7e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	91 11       	cpse	r25, r1
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <HID_Device_ProcessControlRequest+0x1d6>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	f7 01       	movw	r30, r14
     e8c:	81 87       	std	Z+9, r24	; 0x09
     e8e:	34 c0       	rjmp	.+104    	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e90:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_ControlRequest>
     e94:	81 32       	cpi	r24, 0x21	; 33
     e96:	81 f5       	brne	.+96     	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
     e98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e9c:	87 7f       	andi	r24, 0xF7	; 247
     e9e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
     ea2:	17 dc       	rcall	.-2002   	; 0x6d2 <Endpoint_ClearStatusStage>
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     ea4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest+0x2>
     ea8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <USB_ControlRequest+0x3>
     eac:	88 27       	eor	r24, r24
     eae:	36 e0       	ldi	r19, 0x06	; 6
     eb0:	96 95       	lsr	r25
     eb2:	87 95       	ror	r24
     eb4:	3a 95       	dec	r19
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <HID_Device_ProcessControlRequest+0x1fc>
     eb8:	f7 01       	movw	r30, r14
     eba:	95 87       	std	Z+13, r25	; 0x0d
     ebc:	84 87       	std	Z+12, r24	; 0x0c
     ebe:	1c c0       	rjmp	.+56     	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ec0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_ControlRequest>
     ec4:	81 3a       	cpi	r24, 0xA1	; 161
     ec6:	c1 f4       	brne	.+48     	; 0xef8 <HID_Device_ProcessControlRequest+0x244>
     ec8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ed2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsINReady()));
     ed6:	80 ff       	sbrs	r24, 0
     ed8:	fc cf       	rjmp	.-8      	; 0xed2 <HID_Device_ProcessControlRequest+0x21e>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     eda:	f7 01       	movw	r30, r14
     edc:	84 85       	ldd	r24, Z+12	; 0x0c
     ede:	95 85       	ldd	r25, Z+13	; 0x0d
     ee0:	96 95       	lsr	r25
     ee2:	87 95       	ror	r24
     ee4:	96 95       	lsr	r25
     ee6:	87 95       	ror	r24
				UEDATX = Data;
     ee8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     eec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ef0:	8e 77       	andi	r24, 0x7E	; 126
     ef2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
     ef6:	ed db       	rcall	.-2086   	; 0x6d2 <Endpoint_ClearStatusStage>
}
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de be       	out	0x3e, r13	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd be       	out	0x3d, r12	; 61
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	9f 90       	pop	r9
     f1e:	8f 90       	pop	r8
     f20:	7f 90       	pop	r7
     f22:	6f 90       	pop	r6
     f24:	08 95       	ret

00000f26 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     f26:	fc 01       	movw	r30, r24
     f28:	39 96       	adiw	r30, 0x09	; 9
     f2a:	27 e0       	ldi	r18, 0x07	; 7
     f2c:	df 01       	movw	r26, r30
     f2e:	1d 92       	st	X+, r1
     f30:	2a 95       	dec	r18
     f32:	e9 f7       	brne	.-6      	; 0xf2e <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     f34:	21 e0       	ldi	r18, 0x01	; 1
     f36:	fc 01       	movw	r30, r24
     f38:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     f3a:	24 ef       	ldi	r18, 0xF4	; 244
     f3c:	31 e0       	ldi	r19, 0x01	; 1
     f3e:	35 87       	std	Z+13, r19	; 0x0d
     f40:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     f42:	23 e0       	ldi	r18, 0x03	; 3
     f44:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	80 cb       	rjmp	.-2304   	; 0x64c <Endpoint_ConfigureEndpointTable>

00000f4c <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f4c:	4f 92       	push	r4
     f4e:	5f 92       	push	r5
     f50:	6f 92       	push	r6
     f52:	7f 92       	push	r7
     f54:	8f 92       	push	r8
     f56:	9f 92       	push	r9
     f58:	af 92       	push	r10
     f5a:	bf 92       	push	r11
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <HID_Device_USBTask+0x22>
     f6e:	1f 92       	push	r1
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     f76:	ad b6       	in	r10, 0x3d	; 61
     f78:	be b6       	in	r11, 0x3e	; 62
	if (USB_DeviceState != DEVICE_STATE_Configured)
     f7a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_DeviceState>
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	09 f0       	breq	.+2      	; 0xf84 <HID_Device_USBTask+0x38>
     f82:	8d c0       	rjmp	.+282    	; 0x109e <HID_Device_USBTask+0x152>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     f84:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     f88:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     f8c:	f7 01       	movw	r30, r14
     f8e:	22 85       	ldd	r18, Z+10	; 0x0a
     f90:	33 85       	ldd	r19, Z+11	; 0x0b
     f92:	28 17       	cp	r18, r24
     f94:	39 07       	cpc	r19, r25
     f96:	09 f4       	brne	.+2      	; 0xf9a <HID_Device_USBTask+0x4e>
     f98:	82 c0       	rjmp	.+260    	; 0x109e <HID_Device_USBTask+0x152>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f9a:	81 81       	ldd	r24, Z+1	; 0x01
     f9c:	8f 70       	andi	r24, 0x0F	; 15
     f9e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fa2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsReadWriteAllowed())
     fa6:	85 ff       	sbrs	r24, 5
     fa8:	7a c0       	rjmp	.+244    	; 0x109e <HID_Device_USBTask+0x152>
	{
     faa:	8d b6       	in	r8, 0x3d	; 61
     fac:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     fae:	40 85       	ldd	r20, Z+8	; 0x08
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	8d b7       	in	r24, 0x3d	; 61
     fb4:	9e b7       	in	r25, 0x3e	; 62
     fb6:	84 1b       	sub	r24, r20
     fb8:	95 0b       	sbc	r25, r21
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	9e bf       	out	0x3e, r25	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	8d bf       	out	0x3d, r24	; 61
     fc4:	ed b7       	in	r30, 0x3d	; 61
     fc6:	fe b7       	in	r31, 0x3e	; 62
     fc8:	31 96       	adiw	r30, 0x01	; 1
     fca:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     fcc:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     fce:	1a 82       	std	Y+2, r1	; 0x02
     fd0:	19 82       	std	Y+1, r1	; 0x01
		memset(ReportINData, 0, sizeof(ReportINData));
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	cf 01       	movw	r24, r30
     fd8:	91 d0       	rcall	.+290    	; 0x10fc <memset>
		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     fda:	8e 01       	movw	r16, r28
     fdc:	0f 5f       	subi	r16, 0xFF	; 255
     fde:	1f 4f       	sbci	r17, 0xFF	; 255
     fe0:	96 01       	movw	r18, r12
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	be 01       	movw	r22, r28
     fe6:	6d 5f       	subi	r22, 0xFD	; 253
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	c7 01       	movw	r24, r14
     fec:	3f d9       	rcall	.-3458   	; 0x26c <CALLBACK_HID_Device_CreateHIDReport>
     fee:	48 2e       	mov	r4, r24
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     ff0:	f7 01       	movw	r30, r14
     ff2:	84 85       	ldd	r24, Z+12	; 0x0c
     ff4:	95 85       	ldd	r25, Z+13	; 0x0d
     ff6:	89 2b       	or	r24, r25
     ff8:	51 f0       	breq	.+20     	; 0x100e <HID_Device_USBTask+0xc2>
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	26 85       	ldd	r18, Z+14	; 0x0e
    1000:	37 85       	ldd	r19, Z+15	; 0x0f
    1002:	23 2b       	or	r18, r19
    1004:	09 f0       	breq	.+2      	; 0x1008 <HID_Device_USBTask+0xbc>
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	09 2f       	mov	r16, r25
    100a:	18 2f       	mov	r17, r24
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <HID_Device_USBTask+0xc6>
    100e:	00 e0       	ldi	r16, 0x00	; 0
    1010:	10 e0       	ldi	r17, 0x00	; 0
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1012:	f7 01       	movw	r30, r14
    1014:	66 80       	ldd	r6, Z+6	; 0x06
    1016:	77 80       	ldd	r7, Z+7	; 0x07
    1018:	61 14       	cp	r6, r1
    101a:	71 04       	cpc	r7, r1
    101c:	89 f0       	breq	.+34     	; 0x1040 <HID_Device_USBTask+0xf4>
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    101e:	49 81       	ldd	r20, Y+1	; 0x01
    1020:	5a 81       	ldd	r21, Y+2	; 0x02
    1022:	b3 01       	movw	r22, r6
    1024:	c6 01       	movw	r24, r12
    1026:	54 d0       	rcall	.+168    	; 0x10d0 <memcmp>
    1028:	55 24       	eor	r5, r5
    102a:	53 94       	inc	r5
    102c:	89 2b       	or	r24, r25
    102e:	09 f4       	brne	.+2      	; 0x1032 <HID_Device_USBTask+0xe6>
    1030:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1032:	f7 01       	movw	r30, r14
    1034:	40 85       	ldd	r20, Z+8	; 0x08
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	b6 01       	movw	r22, r12
    103a:	c3 01       	movw	r24, r6
    103c:	56 d0       	rcall	.+172    	; 0x10ea <memcpy>
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <HID_Device_USBTask+0xf6>
		bool StatesChanged     = false;
    1040:	51 2c       	mov	r5, r1
		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	9a 81       	ldd	r25, Y+2	; 0x02
    1046:	89 2b       	or	r24, r25
    1048:	f1 f0       	breq	.+60     	; 0x1086 <HID_Device_USBTask+0x13a>
    104a:	41 10       	cpse	r4, r1
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <HID_Device_USBTask+0x10a>
    104e:	51 10       	cpse	r5, r1
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <HID_Device_USBTask+0x10a>
    1052:	01 2b       	or	r16, r17
    1054:	c1 f0       	breq	.+48     	; 0x1086 <HID_Device_USBTask+0x13a>
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1056:	f7 01       	movw	r30, r14
    1058:	84 85       	ldd	r24, Z+12	; 0x0c
    105a:	95 85       	ldd	r25, Z+13	; 0x0d
    105c:	97 87       	std	Z+15, r25	; 0x0f
    105e:	86 87       	std	Z+14, r24	; 0x0e
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1060:	81 81       	ldd	r24, Z+1	; 0x01
    1062:	8f 70       	andi	r24, 0x0F	; 15
    1064:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			if (ReportID)
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 11       	cpse	r24, r1
				UEDATX = Data;
    106c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1070:	69 81       	ldd	r22, Y+1	; 0x01
    1072:	7a 81       	ldd	r23, Y+2	; 0x02
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	c6 01       	movw	r24, r12
    107a:	6a d9       	rcall	.-3372   	; 0x350 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    107c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1080:	8e 77       	andi	r24, 0x7E	; 126
    1082:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1086:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    108a:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    108e:	f7 01       	movw	r30, r14
    1090:	93 87       	std	Z+11, r25	; 0x0b
    1092:	82 87       	std	Z+10, r24	; 0x0a
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	9e be       	out	0x3e, r9	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	8d be       	out	0x3d, r8	; 61
}
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	be be       	out	0x3e, r11	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	ad be       	out	0x3d, r10	; 61
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	bf 90       	pop	r11
    10c0:	af 90       	pop	r10
    10c2:	9f 90       	pop	r9
    10c4:	8f 90       	pop	r8
    10c6:	7f 90       	pop	r7
    10c8:	6f 90       	pop	r6
    10ca:	5f 90       	pop	r5
    10cc:	4f 90       	pop	r4
    10ce:	08 95       	ret

000010d0 <memcmp>:
    10d0:	fb 01       	movw	r30, r22
    10d2:	dc 01       	movw	r26, r24
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <memcmp+0xe>
    10d6:	8d 91       	ld	r24, X+
    10d8:	01 90       	ld	r0, Z+
    10da:	80 19       	sub	r24, r0
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <memcmp+0x16>
    10de:	41 50       	subi	r20, 0x01	; 1
    10e0:	50 40       	sbci	r21, 0x00	; 0
    10e2:	c8 f7       	brcc	.-14     	; 0x10d6 <memcmp+0x6>
    10e4:	88 1b       	sub	r24, r24
    10e6:	99 0b       	sbc	r25, r25
    10e8:	08 95       	ret

000010ea <memcpy>:
    10ea:	fb 01       	movw	r30, r22
    10ec:	dc 01       	movw	r26, r24
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <memcpy+0xa>
    10f0:	01 90       	ld	r0, Z+
    10f2:	0d 92       	st	X+, r0
    10f4:	41 50       	subi	r20, 0x01	; 1
    10f6:	50 40       	sbci	r21, 0x00	; 0
    10f8:	d8 f7       	brcc	.-10     	; 0x10f0 <memcpy+0x6>
    10fa:	08 95       	ret

000010fc <memset>:
    10fc:	dc 01       	movw	r26, r24
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <memset+0x6>
    1100:	6d 93       	st	X+, r22
    1102:	41 50       	subi	r20, 0x01	; 1
    1104:	50 40       	sbci	r21, 0x00	; 0
    1106:	e0 f7       	brcc	.-8      	; 0x1100 <memset+0x4>
    1108:	08 95       	ret

0000110a <_exit>:
    110a:	f8 94       	cli

0000110c <__stop_program>:
    110c:	ff cf       	rjmp	.-2      	; 0x110c <__stop_program>
